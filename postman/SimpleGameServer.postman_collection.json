{
    "info": {
        "name": "SimpleGameServer API",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "base_url",
            "value": "http://localhost:3000",
            "type": "string"
        }
    ],
    "item": [
        {
            "name": "Authentication",
            "item": [
                {
                    "name": "Login",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"{{api_email}}\",\n    \"password\": \"{{api_password}}\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/login",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "login"
                            ]
                        },
                        "description": "Authenticate and get JWT token",
                        "event": [
                            {
                                "listen": "prerequest",
                                "script": {
                                    "type": "text/javascript",
                                    "exec": [
                                        "// Debug environment variables",
                                        "console.log('Environment:', pm.environment.name);",
                                        "console.log('api_email value:', pm.environment.get('api_email'));",
                                        "console.log('api_password value:', pm.environment.get('api_password'));",
                                        "",
                                        "// Debug request body",
                                        "const rawBody = pm.request.body.raw;",
                                        "console.log('Raw request body:', rawBody);",
                                        "",
                                        "// Debug variable resolution",
                                        "const resolvedBody = pm.variables.replaceIn(rawBody);",
                                        "console.log('Resolved request body:', resolvedBody);"
                                    ]
                                }
                            },
                            {
                                "listen": "test",
                                "script": {
                                    "type": "text/javascript",
                                    "exec": [
                                        "// Log the full response for debugging",
                                        "console.log('Response status:', pm.response.status);",
                                        "console.log('Response body:', pm.response.text());",
                                        "",
                                        "// Save the token if we get one",
                                        "const response = pm.response.json();",
                                        "if (response && response.token) {",
                                        "    pm.environment.set('jwt_token', response.token);",
                                        "    console.log('Token saved to environment');",
                                        "}"
                                    ]
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "name": "Game Sessions",
            "item": [
                {
                    "name": "Create Game Session",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{jwt_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"status\": \"waiting\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/game_sessions",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "game_sessions"
                            ]
                        },
                        "description": "Create a new game session",
                        "event": [
                            {
                                "listen": "test",
                                "script": {
                                    "type": "text/javascript",
                                    "exec": [
                                        "pm.test('Status code is 201', function () {",
                                        "    pm.response.to.have.status(201);",
                                        "});",
                                        "",
                                        "pm.test('Response has game session', function () {",
                                        "    const response = pm.response.json();",
                                        "    pm.expect(response).to.have.property('id');",
                                        "    pm.environment.set('game_session_id', response.id);",
                                        "});"
                                    ]
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "List Game Sessions",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{jwt_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/game_sessions",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "game_sessions"
                            ]
                        },
                        "description": "Get all game sessions",
                        "event": [
                            {
                                "listen": "test",
                                "script": {
                                    "type": "text/javascript",
                                    "exec": [
                                        "pm.test('Status code is 200', function () {",
                                        "    pm.response.to.have.status(200);",
                                        "});",
                                        "",
                                        "pm.test('Response is an array', function () {",
                                        "    pm.response.to.be.json;",
                                        "    pm.response.to.be.an('array');",
                                        "});"
                                    ]
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "Get Game Session",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{jwt_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/game_sessions/{{game_session_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "game_sessions",
                                "{{game_session_id}}"
                            ]
                        },
                        "description": "Get a specific game session",
                        "event": [
                            {
                                "listen": "test",
                                "script": {
                                    "type": "text/javascript",
                                    "exec": [
                                        "pm.test('Status code is 200', function () {",
                                        "    pm.response.to.have.status(200);",
                                        "});",
                                        "",
                                        "pm.test('Response has game session', function () {",
                                        "    const response = pm.response.json();",
                                        "    pm.expect(response).to.have.property('id');",
                                        "    pm.expect(response.id).to.equal(pm.environment.get('game_session_id'));",
                                        "});"
                                    ]
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "Cleanup Unused Games",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{jwt_token}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"before\": \"{{$datetime iso8601 -1 d}}\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/game_sessions/cleanup",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "game_sessions",
                                "cleanup"
                            ]
                        },
                        "description": "Delete unused game sessions created before the specified date",
                        "event": [
                            {
                                "listen": "prerequest",
                                "script": {
                                    "type": "text/javascript",
                                    "exec": [
                                        "// Log the cleanup date for debugging",
                                        "const cleanupDate = pm.variables.replaceIn('{{$datetime iso8601 -1 d}}');",
                                        "console.log('Cleaning up games created before:', cleanupDate);"
                                    ]
                                }
                            },
                            {
                                "listen": "test",
                                "script": {
                                    "type": "text/javascript",
                                    "exec": [
                                        "pm.test('Status code is 200', function () {",
                                        "    pm.response.to.have.status(200);",
                                        "});",
                                        "",
                                        "pm.test('Response has message and count', function () {",
                                        "    const response = pm.response.json();",
                                        "    pm.expect(response).to.have.property('message');",
                                        "    pm.expect(response).to.have.property('deleted_count');",
                                        "    pm.expect(response.deleted_count).to.be.a('number');",
                                        "});"
                                    ]
                                }
                            }
                        ]
                    }
                }
            ]
        }
    ]
}